{"version":3,"sources":["input-validator.js"],"names":["InputValidator","selector","options","console","log","$fields","document","querySelectorAll","forEach","$field","domElement","addEventListener","validate","showErrors","previousError","querySelector","body","removeChild","errorBox","createElement","classList","add","innerHTML","errors","append","style","border","setupListeners"],"mappings":";;;;;;;;;;IAAMA,c;;;;;AAEF;AACA;AACA;yBACYC,Q,EAAUC,O,EAAQ;AAAA;;AAC1BC,MAAAA,OAAO,CAACC,GAAR,CAAa,2CAAb,EAD0B,CAG1B;;AACA,UAAMC,OAAO,GAAGC,QAAQ,CAACC,gBAAT,CAA0BN,QAA1B,CAAhB,CAJ0B,CAM1B;;AACAI,MAAAA,OAAO,CAACG,OAAR,CAAgB,UAACC,MAAD,EAAW;AACvB;AACC,YAAI,KAAJ,CAASA,MAAT,EAAiBP,OAAjB,EAFsB,CAGtB;AACJ,OAJD;AAKH;;;AAGD,0BAAYQ,UAAZ,EAAuB;AAAA;;AAAA;;AAAA,sCAaZ,YAAM;AACbP,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AAEH,KAhBsB;;AAAA,4CAiBP,YAAM;AACdD,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EADc,CAId;AAEA;AACA;AACA;;AAEA,MAAA,MAAI,CAACK,MAAL,CAAYE,gBAAZ,CAA6B,OAA7B,EAAsC;AAAA,eAAK,MAAI,CAACC,QAAL,EAAL;AAAA,OAAtC,EAVc,CAYd;AACA;;;AAEA,MAAA,MAAI,CAACH,MAAL,CAAYE,gBAAZ,CAA6B,OAA7B,EAAsC,MAAI,CAACE,UAA3C;AAIP,KApCsB;;AAAA,wCAsCV,YAAM;AAEf,UAAIC,aAAa,GAAGR,QAAQ,CAACS,aAAT,CAAuB,SAAvB,CAApB;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBU,aAAxB;;AAEA,UAAGA,aAAa,KAAK,IAArB,EAA0B;AACtBR,QAAAA,QAAQ,CAACU,IAAT,CAAcC,WAAd,CAA0BH,aAA1B;AAEH;;AAED,UAAII,QAAQ,GAAGZ,QAAQ,CAACa,aAAT,CAAuB,KAAvB,CAAf;AACAD,MAAAA,QAAQ,CAACE,SAAT,CAAmBC,GAAnB,CAAuB,QAAvB;AACAH,MAAAA,QAAQ,CAACI,SAAT,GAAqB,MAAI,CAACC,MAA1B;AACAjB,MAAAA,QAAQ,CAACU,IAAT,CAAcQ,MAAd,CAAqBN,QAArB;;AAEA,UAAGA,QAAQ,CAACI,SAAZ,EAAsB;AAClB,QAAA,MAAI,CAACb,MAAL,CAAYgB,KAAZ,CAAkBC,MAAlB,GAA2B,eAA3B;AACH;;AAEDvB,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyC,MAAI,CAACmB,MAA9C;AAEH,KA3DsB;;AACnBpB,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCM,UAAzC;AAEA,SAAKD,MAAL,GAAaC,UAAb,CAHmB,CAKnB;;AACA,SAAKa,MAAL,GAAc,EAAd;AAEA,SAAKI,cAAL;AACA,SAAKf,QAAL;AACA,SAAKC,UAAL;AACH","sourcesContent":["class InputValidator{\n\n    // a static method is a method (aka function) that can only be called if attactched to its class aka InputValidator/RquiredFieldValidator etc\n    //when the init() method is called, it will create a *this* keyword to represent the class that called it. InputValdiator.init() makes *this* = InputValdiator.  RequiredFieldValidator.init() makes *this* = RequredFieldValidator\n    //the static init must have an \"options\" argument (variable name) so that other constructors can add arguments for their own specific needs later on\n    static init(selector, options){\n        console.log ('Invalidator.init() - I am a static method')\n\n        //select ALL nodes with selector parameter and put them into an array\n        const $fields = document.querySelectorAll(selector)\n       \n        // in the $fields array, for each selector paramter (field), do this thing.\n        $fields.forEach(($field)=> {\n            // new RequiredFieldValidator($field = '[data-required' , options = variable/argument placeholder (being passed through and will be executed by the validator that finds a need/use for it) )\n             new this($field, options)\n             // const instance = new this($field) optional variable wrapping\n        })\n    }\n\n\n    constructor(domElement){\n        console.log('inputValidator() set on: ', domElement);\n\n        this.$field= domElement;\n        \n        //an empty array to collect error messages (see req-field)\n        this.errors = [];\n\n        this.setupListeners()\n        this.validate()\n        this.showErrors()\n    }\n\n    validate = () => {\n        console.log('InputValidator.validate')\n\n    }\n    setupListeners= () => {\n            console.log('InputValidator.setupListeners')\n\n\n            // on keyup, both aEL will run in the order they were written. \n\n            // each child class (reqField, formVal) has thier own validator() fucnction insde them with different instructions.\n            //on 'keyup' determine which *this* aka child class is being referred to and runs that verson of thier validator() function\n            //It does not run immediately because *this* has a changing value and we do not want to bind the function until we know which child class *this* is referring to.\n            \n            this.$field.addEventListener('keyup', ()=> this.validate())\n            \n            //this.showErrors binds the callback function waiting below immediatley to the current *this* value.\n            //this.showErrors does not use () because we are not running it, just binding it so we know what function to to run later \n\n            this.$field.addEventListener('keyup', this.showErrors)\n\n           \n        \n    }\n\n    showErrors = () => {\n        \n        let previousError = document.querySelector('.errors');\n        console.log(\" this is\", previousError)\n\n        if(previousError !== null){\n            document.body.removeChild(previousError);\n\n        }\n\n        let errorBox = document.createElement(\"div\");\n        errorBox.classList.add('errors')\n        errorBox.innerHTML = this.errors;\n        document.body.append(errorBox);\n\n        if(errorBox.innerHTML){\n            this.$field.style.border = '1px solid red';\n        } \n\n        console.log('InputValidator.showErrors', this.errors);\n       \n    }\n}\n\n\n"],"file":"input-validator.js"}