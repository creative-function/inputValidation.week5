{"version":3,"sources":["req-phone-validator.js"],"names":["RequiredPhoneValidator","domElement","phoneToCheck","console","log","$field","errors","phone","value","pVerify","found","exec","push","InputValidator"],"mappings":";;;;;;;;;;;;;;;;;;IAAMA,sB;;;;;AAEF;AACA,kCAAYC,UAAZ,EAAwBC,YAAxB,EAAqC;AAAA;;AAAA;;AAEjC;AACA,gGAAMD,UAAN,GAHiC,CAIjC;;AAJiC,+DAU1B,YAAM;AACbE,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+C,MAAKC,MAApD;AAEA,YAAKC,MAAL,GAAa,EAAb;AAEA,UAAIC,KAAK,GAAG,MAAKF,MAAL,CAAYG,KAAxB;AAEA;;;;;;;;;;;;;;AAaA,UAAIC,OAAO,GAAG,0CAAd,CApBa,CAsBb;;AACA,UAAIC,KAAK,GAAG,KAAZ;;AAEA,UAAGD,OAAO,CAACE,IAAR,CAAaJ,KAAb,CAAH,EAAuB;AACnBG,QAAAA,KAAK,GAAG,IAAR;AACAP,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH,OAHD,MAII;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBK,OAA7B;AACJ;;AAEA,UAAGC,KAAK,IAAI,KAAZ,EAAkB;AACd;AACA,cAAKJ,MAAL,CAAYM,IAAZ,CAAiB,wCAAjB;AACJ;AAEH,KAjDoC;;AAKjC,UAAKV,YAAL,GAAoBA,YAApB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCH,UAAxC,EAAoDC,YAApD;AAPiC;AAQpC;;;EAXgCW,c","sourcesContent":["class RequiredPhoneValidator extends InputValidator{\n\n    //in this constructor we have a second parameter (allowed to exist because inputVaidator has a 2nd optional parameter called options)\n    constructor(domElement, phoneToCheck){\n        \n        //super \"call\" the domElement constructor that is in InputValidator [constructor(domElement)]\n        super(domElement)\n        //remember *this* variable\n        this.phoneToCheck = phoneToCheck\n\n        console.log('RequiredPhoneValidator()', domElement, phoneToCheck)\n    }\n\n    validate = () => {\n        console.log('RequiredPhoneValidator.validate', this.$field);\n        \n        this.errors= [];\n\n        let phone = this.$field.value;\n        \n        /*Within non-capturing parentheses (?: , \n        the regular expression looks for three numeric characters \\d{3} \n        OR |\n        a left parenthesis \\( \n        followed by three digits \\d{3},\n        followed by a close parenthesis \\), \n        (end non-capturing parenthesis )), \n        followed by one dash, forward slash, \n        or decimal point and when found, \n        remember the character ([-\\/\\.]), \n        followed by three digits \\d{3}, \n        followed by the remembered match of a dash, forward slash, or decimal point \\1, \n        followed by four digits \\d{4}.*/ \n        let pVerify = /(?:\\d{3}|\\(\\d{3}\\))([-\\/\\.])\\d{3}\\1\\d{4}/;\n        \n        //default setting so error message will apply automatically\n        let found = false;\n        \n        if(pVerify.exec(phone)){\n            found = true;\n            console.log('found a match')\n        }\n        else{\n            console.log('try again')\n            console.log(\"pVerify is: \" + pVerify)\n       }\n        \n        if(found == false){\n            //add this message to the this.errors array (see InpuValidator)\n            this.errors.push('A functional phone number is required.' ); \n       }\n\n    }\n}\n\n\n"],"file":"req-phone-validator.js"}